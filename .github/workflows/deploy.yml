name: Deploy to VPS

on:
  push:
    branches: [master]
    paths:
      - 'server/**'
      - 'web/**'
      - 'shared/**'
      - 'docker-compose.prod.yml'
      - '.github/workflows/deploy.yml'

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      server-changed: ${{ steps.changes.outputs.server }}
      web-changed: ${{ steps.changes.outputs.web }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Detect changes
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            server:
              - 'server/**'
              - 'shared/**'
              - 'docker-compose.prod.yml'
            web:
              - 'web/**'
              - 'shared/**'
              - 'docker-compose.prod.yml'

  build-and-push-server:
    needs: detect-changes
    if: needs.detect-changes.outputs.server-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push server image
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/telegram-clone-server:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/telegram-clone-server:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-and-push-web:
    needs: detect-changes
    if: needs.detect-changes.outputs.web-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Build and push web image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/telegram-clone-web:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/telegram-clone-web:${{ github.sha }}
          build-args: |
            VITE_API_URL=${{ secrets.VITE_API_URL }}
            VITE_WS_URL=${{ secrets.VITE_WS_URL }}
            VITE_PORT=${{ secrets.VITE_PORT }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy:
    needs: [detect-changes, build-and-push-server, build-and-push-web]
    if: always() && (needs.build-and-push-server.result == 'success' || needs.build-and-push-web.result == 'success' || (needs.build-and-push-server.result == 'skipped' && needs.build-and-push-web.result == 'skipped' && (needs.detect-changes.outputs.server-changed == 'true' || needs.detect-changes.outputs.web-changed == 'true')))
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Create deployment directory on VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            mkdir -p /opt/telegram-clone
            cd /opt/telegram-clone
            
      - name: Copy docker-compose to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          source: "docker-compose.prod.yml"
          target: "/opt/telegram-clone/"
          
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_KEY }}
          script: |
            cd /opt/telegram-clone
            
            # Export environment variables
            export DOCKERHUB_USERNAME="${{ secrets.DOCKERHUB_USERNAME }}"
            export DATABASE_URL="${{ secrets.DATABASE_URL }}"
            export JWT_SECRET="${{ secrets.JWT_SECRET }}"
            export ALLOWED_ORIGINS="${{ secrets.ALLOWED_ORIGINS }}"
            export VITE_API_URL="${{ secrets.VITE_API_URL }}"
            export VITE_WS_URL="${{ secrets.VITE_WS_URL }}"
            export VITE_PORT="${{ secrets.VITE_PORT }}"
            export DB_USER="${{ secrets.DB_USER }}"
            export DB_NAME="${{ secrets.DB_NAME }}"
            export DB_PASSWORD="${{ secrets.DB_PASSWORD }}"
            export PORT="5000"
            
            # Pull latest images
            docker-compose -f docker-compose.prod.yml pull
            
            # Start services
            docker-compose -f docker-compose.prod.yml up -d
            
            # Clean up old images
            docker image prune -f
            
            # Show running containers
            docker-compose -f docker-compose.prod.yml ps
